# vim: set sts=2 ts=8 sw=2 tw=99 et ft=python:
import os, sys

projectName = 'tickrate_enabler'

# smsdk_ext.cpp will be automatically added later
sourceFiles = [
  'codepatch/patchmanager.cpp',
  'tickrate_enabler.cpp', 
  'memutils.cpp',
  'pipebombpatch.cpp',
  
  os.path.join(Extension.sm_root, 'public', 'asm', 'asm.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'decode.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'itab.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-att.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn-intel.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'syn.c'),
  os.path.join(Extension.sm_root, 'public', 'libudis86', 'udis86.c'),
  os.path.join(Extension.mms_root, 'core', 'sourcehook', 'sourcehook.cpp'),
  os.path.join(Extension.mms_root, 'core', 'sourcehook', 'sourcehook_impl_chookidman.cpp'),
  os.path.join(Extension.mms_root, 'core', 'sourcehook', 'sourcehook_impl_cproto.cpp'),
  os.path.join(Extension.mms_root, 'core', 'sourcehook', 'sourcehook_hookmangen.cpp'),
  os.path.join(Extension.mms_root, 'core', 'sourcehook', 'sourcehook_impl_chookmaninfo.cpp'),
  os.path.join(Extension.mms_root, 'core', 'sourcehook', 'sourcehook_impl_cvfnptr.cpp')
]

sourcehooksource = [

]

detour_games = ['tf2']

###############
# Make sure to edit PackageScript, which copies your files to their appropriate locations
# Simple extensions do not need to modify past this point.

project = Extension.HL2Project(builder, projectName)

#if os.path.isfile(os.path.join(builder.currentSourcePath, 'sdk', 'smsdk_ext.cpp')):
  # Use the copy included in the project
#  project.sources += [os.path.join('sdk', 'smsdk_ext.cpp')]
#else:
  # Use the copy included with SM 1.6 and newer
#  project.sources += [os.path.join(Extension.sm_root, 'public', 'smsdk_ext.cpp')]

project.sources += sourceFiles

for sdk_name in Extension.sdks:
  if sdk_name == 'episode1':
    continue
  sdk = Extension.sdks[sdk_name]
  
  binary = Extension.HL2Config(project, projectName, sdk)

#  if builder.target_platform == 'linux' or sdk_name in detour_games:
#    binary.sources += [os.path.join(Extension.sm_root, 'public', 'CDetour', 'detours.cpp')]

binary.compiler.defines += ['HAVE_STRING_H'];
Extension.extensions = builder.Add(project)
